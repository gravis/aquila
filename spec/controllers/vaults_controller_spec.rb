require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VaultsController do

  before { sign_in create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Vault. As you add validations to Vault, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { 'subdomain' => 'my-subdomain' } }

  let(:vault) { create :vault }
  before { allow(controller).to receive(:save).and_return({current_vault: vault}) }

  describe 'GET index' do
    it 'assigns all vaults as @vaults' do
      vault = create :vault
      get :index, {}
      expect(response).to be_success
      # expect(assigns(:vaults)).to eq([vault])
    end
  end

  describe 'GET show' do
    it 'assigns the requested vault as @vault' do
      vault = Vault.create! valid_attributes
      get :show, {:id => vault.to_param}
      expect(assigns(:vault)).to eq(vault)
    end
  end

  describe 'GET new' do
    it 'assigns a new vault as @vault' do
      get :new, {}
      expect(assigns(:vault)).to be_a_new(Vault)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested vault as @vault' do
      vault = Vault.create! valid_attributes
      get :edit, {:id => vault.to_param}
      expect(assigns(:vault)).to eq(vault)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Vault' do
        expect {
          post :create, {:vault => valid_attributes}
        }.to change(Vault, :count).by(1)
      end

      it 'assigns a newly created vault as @vault' do
        post :create, {:vault => valid_attributes}
        expect(assigns(:vault)).to be_a(Vault)
        expect(assigns(:vault)).to be_persisted
      end

      it 'redirects to the created vault' do
        post :create, {:vault => valid_attributes}
        expect(response).to redirect_to(Vault.last)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved vault as @vault' do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Vault).to receive(:save).and_return(false)
        post :create, {:vault => { 'subdomain' => 'invalid value' }}
        expect(assigns(:vault)).to be_a_new(Vault)
      end

      it 're-renders the \'new\' template' do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Vault).to receive(:save).and_return(false)
        post :create, {:vault => { 'subdomain' => 'invalid value' }}
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested vault' do
        vault = Vault.create! valid_attributes
        # Assuming there are no other vaults in the database, this
        # specifies that the Vault created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        allow_any_instance_of(Vault).to receive(:update).and_return({ 'subdomain' => 'MyString' })
        put :update, {:id => vault.to_param, :vault => { 'subdomain' => 'MyString' }}
      end

      it 'assigns the requested vault as @vault' do
        vault = Vault.create! valid_attributes
        put :update, {:id => vault.to_param, :vault => valid_attributes}
        expect(assigns(:vault)).to eq(vault)
      end

      it 'redirects to the vault' do
        vault = Vault.create! valid_attributes
        put :update, {:id => vault.to_param, :vault => valid_attributes}
        expect(response).to redirect_to(vault)
      end
    end

    describe 'with invalid params' do
      it 'assigns the vault as @vault' do
        vault = Vault.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Vault).to receive(:save).and_return(false)
        put :update, {:id => vault.to_param, :vault => { 'subdomain' => 'invalid value' }}
        expect(assigns(:vault)).to eq(vault)
      end

      it 're-renders the \'edit\' template' do
        vault = Vault.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Vault).to receive(:save).and_return(false)
        put :update, {:id => vault.to_param, :vault => { 'subdomain' => 'invalid value' }}
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested vault' do
      vault = Vault.create! valid_attributes
      expect {
        delete :destroy, {:id => vault.to_param}
      }.to change(Vault, :count).by(-1)
    end

    it 'redirects to the vaults list' do
      vault = Vault.create! valid_attributes
      delete :destroy, {:id => vault.to_param}
      expect(response).to redirect_to(vaults_url)
    end
  end

end
